# -*- coding: utf-8 -*-
"""DomainClassification_4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h9LIfQvLtNIn0XhB90z74aW1RY3rYuK1
"""

!pip install transformers==4.31.0

import csv
import random
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM

# Expanded domains with Governance
domains = {
    "Technology": ["AI", "Cloud Computing", "Cybersecurity", "IoT", "Blockchain"],
    "Finance": ["Investments", "Banking", "Insurance", "Cryptocurrency", "Fintech"],
    "Healthcare": ["Surgery", "Pharmaceuticals", "Mental Health", "Diagnostics", "Telemedicine"],
    "Education": ["E-learning", "Traditional Schooling", "Edtech", "Research", "MOOCs"],
    "Entertainment": ["Movies", "Music", "Gaming", "Theatre", "Streaming"],
    "Governance": ["Policy Making", "Regulatory Compliance", "Public Administration", "E-Governance", "Law & Justice"],
}

# Load tokenizer and model
tokenizer = AutoTokenizer.from_pretrained("google/flan-t5-base")
model = AutoModelForSeq2SeqLM.from_pretrained("google/flan-t5-base")

def generate_description(domain, sub_domain):
    prompt = f"Write a detailed 1000-word description about {sub_domain} in the {domain} domain."
    try:
        inputs = tokenizer(prompt, return_tensors="pt")
        outputs = model.generate(**inputs, max_length=2000)  # Adjust max_length if needed
        description = tokenizer.decode(outputs[0], skip_special_tokens=True)
        return description
    except Exception as e:
        print(f"Error generating description: {e}")
        return None

# Create the dataset
def generate_dataset(file_name, rows=10000):
    with open(file_name, mode="w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(["description", "domain", "sub_domain"])  # Write header

        for _ in range(rows):
            # Randomly select domain and sub-domain
            domain = random.choice(list(domains.keys()))
            sub_domain = random.choice(domains[domain])

            # Generate description
            description = generate_description(domain, sub_domain)

            # Write row
            writer.writerow([description, domain, sub_domain])

    print(f"Dataset with {rows} rows created: {file_name}")

# Generate dataset (Uncomment to run)
# generate_dataset("governance_dataset.csv", rows=10)

generate_dataset("governance_dataset.csv", rows=10000)

