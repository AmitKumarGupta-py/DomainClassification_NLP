# -*- coding: utf-8 -*-
"""NaiveBayes_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MaxzUUnCAqOnMlajHjhzhE6vKTaIcozA
"""

pip install pandas numpy nltk gensim scikit-learn gradio

import pandas as pd
import numpy as np
import nltk
import re
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
from gensim.models import Word2Vec
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import gradio as gr
import joblib

nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')

nltk.download('punkt_tab')

# Load dataset
df = pd.read_csv("governance_dataset.csv")

# Preprocessing function
lemmatizer = WordNetLemmatizer()
stop_words = set(stopwords.words('english'))

def preprocess_text(text):
    text = text.lower()  # Convert to lowercase
    text = re.sub(r'[^a-zA-Z\s]', '', text)  # Remove punctuation & numbers
    tokens = word_tokenize(text)  # Tokenization
    tokens = [lemmatizer.lemmatize(word) for word in tokens if word not in stop_words]  # Lemmatization & Stopwords removal
    return tokens

df['processed_description'] = df['description'].apply(preprocess_text)

# Train Word2Vec Model
word2vec_model = Word2Vec(sentences=df['processed_description'], vector_size=100, window=5, min_count=1, workers=4)
word_vectors = word2vec_model.wv  # Get word embeddings

# Function to get the average Word2Vec vector for a sentence
def get_sentence_vector(tokens, word_vectors, vector_size=100):
    vectors = [word_vectors[word] for word in tokens if word in word_vectors]
    return np.mean(vectors, axis=0) if vectors else np.zeros(vector_size)

# Convert descriptions into feature vectors
X = np.array([get_sentence_vector(tokens, word_vectors) for tokens in df['processed_description']])
y = df['domain']  # 'domain' is the target variable

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train Na√Øve Bayes Model
nb_model = MultinomialNB()
nb_model.fit(X_train, y_train)

# Predictions & Evaluation
y_pred = nb_model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

joblib.dump(nb_model, "naive_bayes_model.pkl")
joblib.dump(scaler, "scaler.pkl")
joblib.dump(word2vec_model, "word2vec_model.pkl")

# Load saved models
nb_model = joblib.load("naive_bayes_model.pkl")
scaler = joblib.load("scaler.pkl")
word2vec_model = joblib.load("word2vec_model.pkl")
word_vectors = word2vec_model.wv

def predict_domain(text):
    tokens = preprocess_text(text)
    vector = get_sentence_vector(tokens, word_vectors).reshape(1, -1)
    vector_scaled = scaler.transform(vector)
    prediction = nb_model.predict(vector_scaled)
    return prediction[0]

# Gradio UI
interface = gr.Interface(
    fn=predict_domain,
    inputs="text",
    outputs="text",
    title="Domain Classifier",
    description="Enter a description, and the model will predict the domain."
)

interface.launch()

